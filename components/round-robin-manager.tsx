"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Trophy, Users, Calculator } from "lucide-react"
import type { Participant, Fight, FightResult } from "../types"

interface RoundRobinResult {
  participant: Participant
  wins: number
  losses: number
  points: number
  timeBonus: number
  totalScore: number
  place: number
}

interface RoundRobinManagerProps {
  categoryId: string
  participants: Participant[]
  fights: Fight[]
  onUpdateResult: (fightId: string, result: FightResult) => void
}

export default function RoundRobinManager({
  categoryId,
  participants,
  fights,
  onUpdateResult,
}: RoundRobinManagerProps) {
  const [manualScores, setManualScores] = useState<{ [participantId: string]: number }>({})

  // –§–∏–ª—å—Ç—Ä—É–µ–º –±–æ–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const categoryFights = fights.filter((fight) => fight.categoryId === categoryId)

  // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä—É–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
  const calculateResults = (): RoundRobinResult[] => {
    const results: RoundRobinResult[] = participants.map((participant) => ({
      participant,
      wins: 0,
      losses: 0,
      points: 0,
      timeBonus: 0,
      totalScore: manualScores[participant.id] || 0,
      place: 0,
    }))

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –±–æ—ë–≤
    categoryFights.forEach((fight) => {
      if (fight.result && fight.participant1 && fight.participant2) {
        const winner = fight.result.winner === "red" ? fight.participant1 : fight.participant2
        const loser = fight.result.winner === "red" ? fight.participant2 : fight.participant1

        const winnerResult = results.find((r) => r.participant.id === winner.id)
        const loserResult = results.find((r) => r.participant.id === loser.id)

        if (winnerResult && loserResult) {
          winnerResult.wins++
          loserResult.losses++

          // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–±–µ–¥—ã
          switch (fight.result.type) {
            case "ippon":
              winnerResult.points += 3
              break
            case "wazari":
              winnerResult.points += 2
              break
            case "hantei":
              winnerResult.points += 1
              break
            case "technique":
              winnerResult.points += 2
              break
            default:
              winnerResult.points += 1
          }

          // –ë–æ–Ω—É—Å –∑–∞ –≤—Ä–µ–º—è (–µ—Å–ª–∏ –±–æ–π –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –±—ã—Å—Ç—Ä–æ)
          if (fight.duration && fight.duration < 60) {
            winnerResult.timeBonus += 1
          }
        }
      }
    })

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —Å—á—ë—Ç –∏ –º–µ—Å—Ç–∞
    results.forEach((result) => {
      result.totalScore += result.points + result.timeBonus
    })

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É —Å—á—ë—Ç—É (–±–æ–ª—å—à–µ - –ª—É—á—à–µ)
    results.sort((a, b) => {
      if (b.totalScore !== a.totalScore) return b.totalScore - a.totalScore
      if (b.wins !== a.wins) return b.wins - a.wins
      return a.losses - b.losses
    })

    // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –º–µ—Å—Ç–∞
    results.forEach((result, index) => {
      result.place = index + 1
    })

    return results
  }

  const results = calculateResults()

  const updateManualScore = (participantId: string, score: number) => {
    setManualScores((prev) => ({
      ...prev,
      [participantId]: score,
    }))
  }

  const getPlaceColor = (place: number): string => {
    switch (place) {
      case 1:
        return "bg-yellow-100 text-yellow-800"
      case 2:
        return "bg-gray-100 text-gray-800"
      case 3:
        return "bg-orange-100 text-orange-800"
      default:
        return "bg-gray-50 text-gray-600"
    }
  }

  const getPlaceIcon = (place: number): string => {
    switch (place) {
      case 1:
        return "ü•á"
      case 2:
        return "ü•à"
      case 3:
        return "ü•â"
      default:
        return `${place}`
    }
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Users className="h-6 w-6" />
            –ö—Ä—É–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ - –ì—Ä—É–ø–ø–∞ –∏–∑ {participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–æ—ë–≤ */}
            <div>
              <h3 className="text-lg font-semibold mb-3">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–æ—ë–≤</h3>
              <div className="space-y-2">
                {categoryFights.map((fight) => (
                  <div
                    key={fight.id}
                    className={`p-3 border rounded-lg ${
                      fight.status === "completed"
                        ? "bg-green-50 border-green-200"
                        : fight.status === "in-progress"
                          ? "bg-blue-50 border-blue-200"
                          : "bg-gray-50 border-gray-200"
                    }`}
                  >
                    <div className="flex justify-between items-center">
                      <div>
                        <Badge variant="outline" className="mb-1">
                          –ë–æ–π #{fight.fightNumber}
                        </Badge>
                        <div className="text-sm">
                          <span className="text-red-600">{fight.participant1?.fullName}</span>
                          <span className="mx-2">vs</span>
                          <span className="text-blue-600">{fight.participant2?.fullName}</span>
                        </div>
                      </div>
                      {fight.result && (
                        <Badge
                          className={
                            fight.result.winner === "red" ? "bg-red-100 text-red-800" : "bg-blue-100 text-blue-800"
                          }
                        >
                          {fight.result.winner === "red" ? "–ö—Ä–∞—Å–Ω—ã–π" : "–°–∏–Ω–∏–π"} - {fight.result.type}
                        </Badge>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* –†—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∫–æ–≤ */}
            <div>
              <h3 className="text-lg font-semibold mb-3">–†—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∫–æ–≤</h3>
              <div className="space-y-3">
                {participants.map((participant) => (
                  <div key={participant.id} className="flex items-center gap-3">
                    <div className="flex-1">
                      <div className="font-medium text-sm">{participant.fullName}</div>
                      <div className="text-xs text-gray-500">{participant.club}</div>
                    </div>
                    <div className="flex items-center gap-2">
                      <label className="text-sm">–û—á–∫–∏:</label>
                      <Input
                        type="number"
                        value={manualScores[participant.id] || 0}
                        onChange={(e) => updateManualScore(participant.id, Number.parseInt(e.target.value) || 0)}
                        className="w-20"
                      />
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Trophy className="h-6 w-6" />
            –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>–ú–µ—Å—Ç–æ</TableHead>
                <TableHead>–£—á–∞—Å—Ç–Ω–∏–∫</TableHead>
                <TableHead>–ö–ª—É–±</TableHead>
                <TableHead>–ü–æ–±–µ–¥—ã</TableHead>
                <TableHead>–ü–æ—Ä–∞–∂–µ–Ω–∏—è</TableHead>
                <TableHead>–û—á–∫–∏ –∑–∞ –±–æ–∏</TableHead>
                <TableHead>–ë–æ–Ω—É—Å –∑–∞ –≤—Ä–µ–º—è</TableHead>
                <TableHead>–†—É—á–Ω—ã–µ –æ—á–∫–∏</TableHead>
                <TableHead>–û–±—â–∏–π —Å—á—ë—Ç</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {results.map((result) => (
                <TableRow key={result.participant.id} className={getPlaceColor(result.place)}>
                  <TableCell className="font-bold">
                    <div className="flex items-center gap-2">
                      <span className="text-lg">{getPlaceIcon(result.place)}</span>
                      <span>{result.place}</span>
                    </div>
                  </TableCell>
                  <TableCell className="font-medium">{result.participant.fullName}</TableCell>
                  <TableCell>{result.participant.club}</TableCell>
                  <TableCell className="text-green-600 font-medium">{result.wins}</TableCell>
                  <TableCell className="text-red-600">{result.losses}</TableCell>
                  <TableCell>{result.points}</TableCell>
                  <TableCell>{result.timeBonus}</TableCell>
                  <TableCell>{manualScores[result.participant.id] || 0}</TableCell>
                  <TableCell className="font-bold text-lg">{result.totalScore}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <Card>
        <CardContent className="pt-6">
          <div className="flex gap-4">
            <Button>
              <Calculator className="h-4 w-4 mr-2" />
              –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            </Button>
            <Button variant="outline">–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞</Button>
            <Button variant="outline">–ü–µ—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã</Button>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
